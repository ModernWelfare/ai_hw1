Empirical valuation experiment:

We decided to compare different heuristic evaluations for the purposes of our experiment.

The three different heuristic functions we wrote are:
1) evaluateBoard()
This function iterates over the board, and counts the number of 2 connections to 
n connections in a row - so it counts the number of twos-in-a-row, threes-in-a-row,...
all the way up to N-in-row. It counts these in each of the four directions (vertical,
horizontal, left diagonal, right diagonal).

For each i in {2, 3, .... N}, if 'i' number of connections is larger than 0,
we normalize the values by score for that i to 1. Similarly, if the number of 
connections is less than 0, we normalize that score to -1. This ensures that 
the total score for the board does not overflow the size of an int in case of 
very large 'N' values. When adding up the individual scores for the overall 
board score, we weigh the score by multiplying it with 'i'.

We carry out the same process for the opponent player, and then subtract that value
from the board value for our player.

This is the heuristic we use if minimax is taking too long.

2)evaluateBoardForOnlyWins()
This function is a simplified version of evaluateBoard(). Instead of checking the number
of connections from 2 to N, it checks the number of connections for just N (the winning
condition). It does this for both our player and the opponent's player. If the opponent
has any winning rows, we return a min value.

Since there is just one value (that of NConnections) being considered, we do not 
normalize the values.

This is obviously not a very intelligent heuristic, since in a game of connect4, 
a board with 2 connected tokens would score the same as a board with 3 connected tokens:
where we know that 3 connected tokens is a better situation to be in.

3) evaluateBoardUsingCenterOfMass()
This function evaluates the board based on the number of tokens that are closer to the 
center of the board. The higher the number of tokens that are closer to the center of
the board, the higher the board is rated.

It then calculates the board value for the opponent as well, and returns the difference.

Predictions:
We expected the evaluateBoard() function to perform the best as the heuristic. This is because 
this heuristic comprehensively evaluates the board in all directions for all connections. This 
would represent the best chance of winning at each state of the board.

We expected the evaluateBoardUsingCenterOfMass() to perform the second best, since it is considered 
good strategy in adverserial games to dominate the center of the board. However, this function had the 
disadvantage of not checking for connections between tokens. Thus, it also ignores any opponent tokens 
that may be interrupting the formation of a connection.

We expected the evaluateBoardOnlyForWins() to perform the worst, since it does not weigh 
boards differently unless the winning condition is achieved.

Experiment Observations:
There were two experimental setups: one where minimax (with alpha-beta pruning) was used and the heuristic 
was a fallback (as defined in the hw problem); and the other where we removed the call to minimax and 
simply called the heuristic function. The second setup was used to directly compare the heuristics with one 
another without any efficiency that the minimax algorithm would generate.

In both setups, we played players using each of the heuristics against each other.

It was observed that in all cases, the predicted results were generally true over a set of games. While there 
were a couple of games in the cases where the predicted result was false, these were a small enough subset 
so as to be attributed to chance.

While running the game, it was observed that evaluateBoard() out-performs the other two 
heuristics when it came to making the most sensible move in the overall context of the game. The other 
two heuristics generate moves that effectively ignore the existence of another player on the board, since 
they do not check for connections between tokens on each move.

However, for the purposes of the program, we used the evaluateBoardUsingCenterOfMass() heuristic, since 
in certain cases, the heuristic evaluateBoard() did not return in the specified time. We believe this 
is because of the fact that it traverses the game board multiple times while looking for connections in 
four directions - and this traversal takes time if the board is larger than some n. We could have taken more 
time from the minimax algorithm and given it to the heuristic, but that would have basically just punted the 
problem down the road. Instead, we decided to use the less precise, but more certain to complete in 
2 seconds, heuristic function (namely, evaluateBoardUsingCenterOfMass()).

Interestingly, when running our player against itself, the minimax and heuristic combined result in an 
infinite game; in other words, they force a draw.
